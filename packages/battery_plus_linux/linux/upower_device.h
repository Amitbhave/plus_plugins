/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __UPOWER_DEVICE_H__
#define __UPOWER_DEVICE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.UPower.Device */

#define UPOWER_TYPE_DEVICE (upower_device_get_type ())
#define UPOWER_DEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UPOWER_TYPE_DEVICE, UPowerDevice))
#define UPOWER_IS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UPOWER_TYPE_DEVICE))
#define UPOWER_DEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), UPOWER_TYPE_DEVICE, UPowerDeviceIface))

struct _UPowerDevice;
typedef struct _UPowerDevice UPowerDevice;
typedef struct _UPowerDeviceIface UPowerDeviceIface;

struct _UPowerDeviceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_history) (
    UPowerDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution);

  gboolean (*handle_get_statistics) (
    UPowerDevice *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type);

  gboolean (*handle_refresh) (
    UPowerDevice *object,
    GDBusMethodInvocation *invocation);

  guint  (*get_battery_level) (UPowerDevice *object);

  gdouble  (*get_capacity) (UPowerDevice *object);

  gdouble  (*get_energy) (UPowerDevice *object);

  gdouble  (*get_energy_empty) (UPowerDevice *object);

  gdouble  (*get_energy_full) (UPowerDevice *object);

  gdouble  (*get_energy_full_design) (UPowerDevice *object);

  gdouble  (*get_energy_rate) (UPowerDevice *object);

  gboolean  (*get_has_history) (UPowerDevice *object);

  gboolean  (*get_has_statistics) (UPowerDevice *object);

  const gchar * (*get_icon_name) (UPowerDevice *object);

  gboolean  (*get_is_present) (UPowerDevice *object);

  gboolean  (*get_is_rechargeable) (UPowerDevice *object);

  gdouble  (*get_luminosity) (UPowerDevice *object);

  const gchar * (*get_model) (UPowerDevice *object);

  const gchar * (*get_native_path) (UPowerDevice *object);

  gboolean  (*get_online) (UPowerDevice *object);

  gdouble  (*get_percentage) (UPowerDevice *object);

  gboolean  (*get_power_supply) (UPowerDevice *object);

  const gchar * (*get_serial) (UPowerDevice *object);

  guint  (*get_state) (UPowerDevice *object);

  guint  (*get_technology) (UPowerDevice *object);

  gdouble  (*get_temperature) (UPowerDevice *object);

  gint64  (*get_time_to_empty) (UPowerDevice *object);

  gint64  (*get_time_to_full) (UPowerDevice *object);

  guint  (*get_type_) (UPowerDevice *object);

  guint64  (*get_update_time) (UPowerDevice *object);

  const gchar * (*get_vendor) (UPowerDevice *object);

  gdouble  (*get_voltage) (UPowerDevice *object);

  guint  (*get_warning_level) (UPowerDevice *object);

};

GType upower_device_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *upower_device_interface_info (void);
guint upower_device_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void upower_device_complete_refresh (
    UPowerDevice *object,
    GDBusMethodInvocation *invocation);

void upower_device_complete_get_history (
    UPowerDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);

void upower_device_complete_get_statistics (
    UPowerDevice *object,
    GDBusMethodInvocation *invocation,
    GVariant *data);



/* D-Bus method calls: */
void upower_device_call_refresh (
    UPowerDevice *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean upower_device_call_refresh_finish (
    UPowerDevice *proxy,
    GAsyncResult *res,
    GError **error);

gboolean upower_device_call_refresh_sync (
    UPowerDevice *proxy,
    GCancellable *cancellable,
    GError **error);

void upower_device_call_get_history (
    UPowerDevice *proxy,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean upower_device_call_get_history_finish (
    UPowerDevice *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean upower_device_call_get_history_sync (
    UPowerDevice *proxy,
    const gchar *arg_type,
    guint arg_timespan,
    guint arg_resolution,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);

void upower_device_call_get_statistics (
    UPowerDevice *proxy,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean upower_device_call_get_statistics_finish (
    UPowerDevice *proxy,
    GVariant **out_data,
    GAsyncResult *res,
    GError **error);

gboolean upower_device_call_get_statistics_sync (
    UPowerDevice *proxy,
    const gchar *arg_type,
    GVariant **out_data,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *upower_device_get_native_path (UPowerDevice *object);
gchar *upower_device_dup_native_path (UPowerDevice *object);
void upower_device_set_native_path (UPowerDevice *object, const gchar *value);

const gchar *upower_device_get_vendor (UPowerDevice *object);
gchar *upower_device_dup_vendor (UPowerDevice *object);
void upower_device_set_vendor (UPowerDevice *object, const gchar *value);

const gchar *upower_device_get_model (UPowerDevice *object);
gchar *upower_device_dup_model (UPowerDevice *object);
void upower_device_set_model (UPowerDevice *object, const gchar *value);

const gchar *upower_device_get_serial (UPowerDevice *object);
gchar *upower_device_dup_serial (UPowerDevice *object);
void upower_device_set_serial (UPowerDevice *object, const gchar *value);

guint64 upower_device_get_update_time (UPowerDevice *object);
void upower_device_set_update_time (UPowerDevice *object, guint64 value);

guint upower_device_get_type_ (UPowerDevice *object);
void upower_device_set_type_ (UPowerDevice *object, guint value);

gboolean upower_device_get_power_supply (UPowerDevice *object);
void upower_device_set_power_supply (UPowerDevice *object, gboolean value);

gboolean upower_device_get_has_history (UPowerDevice *object);
void upower_device_set_has_history (UPowerDevice *object, gboolean value);

gboolean upower_device_get_has_statistics (UPowerDevice *object);
void upower_device_set_has_statistics (UPowerDevice *object, gboolean value);

gboolean upower_device_get_online (UPowerDevice *object);
void upower_device_set_online (UPowerDevice *object, gboolean value);

gdouble upower_device_get_energy (UPowerDevice *object);
void upower_device_set_energy (UPowerDevice *object, gdouble value);

gdouble upower_device_get_energy_empty (UPowerDevice *object);
void upower_device_set_energy_empty (UPowerDevice *object, gdouble value);

gdouble upower_device_get_energy_full (UPowerDevice *object);
void upower_device_set_energy_full (UPowerDevice *object, gdouble value);

gdouble upower_device_get_energy_full_design (UPowerDevice *object);
void upower_device_set_energy_full_design (UPowerDevice *object, gdouble value);

gdouble upower_device_get_energy_rate (UPowerDevice *object);
void upower_device_set_energy_rate (UPowerDevice *object, gdouble value);

gdouble upower_device_get_voltage (UPowerDevice *object);
void upower_device_set_voltage (UPowerDevice *object, gdouble value);

gdouble upower_device_get_luminosity (UPowerDevice *object);
void upower_device_set_luminosity (UPowerDevice *object, gdouble value);

gint64 upower_device_get_time_to_empty (UPowerDevice *object);
void upower_device_set_time_to_empty (UPowerDevice *object, gint64 value);

gint64 upower_device_get_time_to_full (UPowerDevice *object);
void upower_device_set_time_to_full (UPowerDevice *object, gint64 value);

gdouble upower_device_get_percentage (UPowerDevice *object);
void upower_device_set_percentage (UPowerDevice *object, gdouble value);

gdouble upower_device_get_temperature (UPowerDevice *object);
void upower_device_set_temperature (UPowerDevice *object, gdouble value);

gboolean upower_device_get_is_present (UPowerDevice *object);
void upower_device_set_is_present (UPowerDevice *object, gboolean value);

guint upower_device_get_state (UPowerDevice *object);
void upower_device_set_state (UPowerDevice *object, guint value);

gboolean upower_device_get_is_rechargeable (UPowerDevice *object);
void upower_device_set_is_rechargeable (UPowerDevice *object, gboolean value);

gdouble upower_device_get_capacity (UPowerDevice *object);
void upower_device_set_capacity (UPowerDevice *object, gdouble value);

guint upower_device_get_technology (UPowerDevice *object);
void upower_device_set_technology (UPowerDevice *object, guint value);

guint upower_device_get_warning_level (UPowerDevice *object);
void upower_device_set_warning_level (UPowerDevice *object, guint value);

guint upower_device_get_battery_level (UPowerDevice *object);
void upower_device_set_battery_level (UPowerDevice *object, guint value);

const gchar *upower_device_get_icon_name (UPowerDevice *object);
gchar *upower_device_dup_icon_name (UPowerDevice *object);
void upower_device_set_icon_name (UPowerDevice *object, const gchar *value);


/* ---- */

#define UPOWER_TYPE_DEVICE_PROXY (upower_device_proxy_get_type ())
#define UPOWER_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UPOWER_TYPE_DEVICE_PROXY, UPowerDeviceProxy))
#define UPOWER_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UPOWER_TYPE_DEVICE_PROXY, UPowerDeviceProxyClass))
#define UPOWER_DEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UPOWER_TYPE_DEVICE_PROXY, UPowerDeviceProxyClass))
#define UPOWER_IS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UPOWER_TYPE_DEVICE_PROXY))
#define UPOWER_IS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UPOWER_TYPE_DEVICE_PROXY))

typedef struct _UPowerDeviceProxy UPowerDeviceProxy;
typedef struct _UPowerDeviceProxyClass UPowerDeviceProxyClass;
typedef struct _UPowerDeviceProxyPrivate UPowerDeviceProxyPrivate;

struct _UPowerDeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  UPowerDeviceProxyPrivate *priv;
};

struct _UPowerDeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType upower_device_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UPowerDeviceProxy, g_object_unref)
#endif

void upower_device_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UPowerDevice *upower_device_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
UPowerDevice *upower_device_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void upower_device_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
UPowerDevice *upower_device_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
UPowerDevice *upower_device_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define UPOWER_TYPE_DEVICE_SKELETON (upower_device_skeleton_get_type ())
#define UPOWER_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), UPOWER_TYPE_DEVICE_SKELETON, UPowerDeviceSkeleton))
#define UPOWER_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), UPOWER_TYPE_DEVICE_SKELETON, UPowerDeviceSkeletonClass))
#define UPOWER_DEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), UPOWER_TYPE_DEVICE_SKELETON, UPowerDeviceSkeletonClass))
#define UPOWER_IS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), UPOWER_TYPE_DEVICE_SKELETON))
#define UPOWER_IS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), UPOWER_TYPE_DEVICE_SKELETON))

typedef struct _UPowerDeviceSkeleton UPowerDeviceSkeleton;
typedef struct _UPowerDeviceSkeletonClass UPowerDeviceSkeletonClass;
typedef struct _UPowerDeviceSkeletonPrivate UPowerDeviceSkeletonPrivate;

struct _UPowerDeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  UPowerDeviceSkeletonPrivate *priv;
};

struct _UPowerDeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType upower_device_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (UPowerDeviceSkeleton, g_object_unref)
#endif

UPowerDevice *upower_device_skeleton_new (void);


G_END_DECLS

#endif /* __UPOWER_DEVICE_H__ */
